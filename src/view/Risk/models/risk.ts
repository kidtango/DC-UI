// Generated by https://quicktype.io

export interface TopLevel {
  classifyRisk: ClassifyRisk;
}

export interface ClassifyRisk {
  compoundRisk: number;
  riskBuckets: RiskBucket[];
  __typename: string;
}

export interface RiskBucket {
  id: string;
  severity: string;
  likelihood: string;
  numberOfRisks: number;
  numberOfLowConfidenceRisks: number;
  averageConfidenceLevel: number;
  filteredNumberOfRisks: number;
  filteredNumberOfLowConfidenceRisks: number;
  filteredAverageConfidenceLevel: string;
  filteredScore: number;
  risks: RiskElement[];
  __typename: string;
}

export interface RiskElement {
  id: string;
  risk: RiskRisk;
  engineeringModule: EngineeringModule;
  hardwareFailures: HardwareFailure[];
  processFailures: Failure[];
  peopleFailures: Failure[];
  __typename: PurpleTypename;
  severity: string;
  likelihood: string;
  confidenceLevel: number;
  lowConfidence: boolean;
  score: number;
  contributors: Contributor[];
  recommends: Contributor[];
}

export enum PurpleTypename {
  ClassifiedRisk = 'ClassifiedRisk',
}

export interface Contributor {
  id: string;
  featureName: FeatureName;
  featureValue: string;
  weight: number;
  __typename: ContributorTypename;
}

export enum ContributorTypename {
  Contributor = 'Contributor',
}

export enum FeatureName {
  Cause = 'cause',
  Consequence = 'consequence',
  Description = 'description',
  DisciplineID = 'discipline.id',
  DisciplineName = 'discipline.name',
  ID = 'id',
  Title = 'title',
}

export interface EngineeringModule {
  id: string;
  name: string;
  topology: Topology;
  hardwares: Hardware[];
  criticality: Criticality;
  __typename: EngineeringModuleTypename;
}

export enum EngineeringModuleTypename {
  EngineeringModule = 'EngineeringModule',
}

export enum Criticality {
  High = 'High',
}

export interface Hardware {
  id: string;
  __typename: ProcessTypename;
}

export enum ProcessTypename {
  Failure = 'Failure',
  Hardware = 'Hardware',
  Process = 'Process',
  Risk = 'Risk',
  Role = 'Role',
}

export interface Topology {
  id: string;
  onshoreOffshore: OnshoreOffshore;
  upstreamDownstream: UpstreamDownstream;
  oilGas: OilGas;
  facilityType: FacilityType;
  __typename: TopologyTypename;
}

export enum TopologyTypename {
  Topology = 'Topology',
}

export enum FacilityType {
  Fpso = 'FPSO',
}

export enum OilGas {
  Oil = 'Oil',
}

export enum OnshoreOffshore {
  Offshore = 'Offshore',
}

export enum UpstreamDownstream {
  Upstream = 'Upstream',
}

export interface HardwareFailure {
  id: string;
  hardware: Discipline;
  possibleFailure: Discipline;
  description: string;
  likelihood: string;
  severity: string;
  risk: Hardware;
  __typename: HardwareFailureTypename;
}

export enum HardwareFailureTypename {
  HardwareFailure = 'HardwareFailure',
}

export interface Discipline {
  id: string;
  name: string;
  description?: string;
  __typename: DisciplineTypename;
  type?: Type;
}

export enum DisciplineTypename {
  DisciplineRisk = 'DisciplineRisk',
  Failure = 'Failure',
  Hardware = 'Hardware',
}

export enum Type {
  HardwareFailure = 'Hardware Failure',
}

export interface Failure {
  id: string;
  role?: Hardware;
  possibleFailure: Hardware;
  description: string;
  likelihood: string;
  severity: string;
  risk: Hardware;
  __typename: string;
  process?: Hardware;
}

export interface RiskRisk {
  id: string;
  title: string;
  description: string;
  cause: string;
  consequence: string;
  topology: Topology;
  discipline: Discipline;
  __typename: ProcessTypename;
}
